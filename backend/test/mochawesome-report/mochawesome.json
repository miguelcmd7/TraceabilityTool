{
  "stats": {
    "suites": 16,
    "tests": 56,
    "passes": 56,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-09T02:22:10.097Z",
    "end": "2019-05-09T02:22:10.439Z",
    "duration": 342,
    "testsRegistered": 58,
    "passPercent": 96.6,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "28a7616a-9627-4880-aa57-69f878f9ac4f",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [
      {
        "title": "should delete network",
        "fullTitle": "should delete network",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "chai.request(url)\n    .delete('/network')\n    .send()\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200);\n        //expect(res.body).to.have.property('domain').equal('mired.com')\n        done();\n    });",
        "err": {},
        "isRoot": true,
        "uuid": "1af47a1b-99fc-4ff8-9c28-00aabb9c93a7",
        "isHook": false,
        "skipped": true
      },
      {
        "title": "should create a network",
        "fullTitle": "should create a network",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "chai.request(url)\n    .post('/network')\n    .send(net)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('netDomain').equal('miredseg.com')\n        expect(res.body).to.have.property('netName').equal('Miredseg')\n        done();\n    });",
        "err": {},
        "isRoot": true,
        "uuid": "a578b11a-0735-43e6-bf9b-46e9961ed0d1",
        "isHook": false,
        "skipped": true
      }
    ],
    "suites": [
      {
        "uuid": "8c49b303-0601-4e0f-b697-abd99bb39055",
        "title": "Testing Network Backend",
        "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testNet.js",
        "file": "/testNet.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ae733010-1caf-48e7-97e0-855453209872",
            "title": "Reseting..",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testNet.js",
            "file": "/testNet.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete network",
                "fullTitle": "Testing Network Backend Reseting.. should delete network",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.delete('/network')\n\t.send()\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\t//expect(res.body).to.have.property('domain').equal('mired.com')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "34e2a659-1c47-4228-97d5-813fce74ed17",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "34e2a659-1c47-4228-97d5-813fce74ed17"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "973bd273-4fea-48bc-95bb-1bb1cff564b3",
            "title": "Create a network",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testNet.js",
            "file": "/testNet.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a network",
                "fullTitle": "Testing Network Backend Create a network should create a network",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.post('/network')\n\t.send(net)\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\texpect(res.body).to.have.property('netDomain').equal('mired.com')\n\t\texpect(res.body).to.have.property('netName').equal('Mired')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "5924530d-0d15-46f9-85e2-405fb7d540fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return bad request",
                "fullTitle": "Testing Network Backend Create a network should return bad request",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.post('/network')\n\t.send({domian:''})\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(404);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "f569e4f0-cd94-4869-9f97-e763498c0c13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should error  creating a new network existing one",
                "fullTitle": "Testing Network Backend Create a network should error  creating a new network existing one",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.post('/network')\n\t.send(net)\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(500);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "52b2b65e-bad0-4e79-8f9a-c89a702d9de1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5924530d-0d15-46f9-85e2-405fb7d540fe",
              "f569e4f0-cd94-4869-9f97-e763498c0c13",
              "52b2b65e-bad0-4e79-8f9a-c89a702d9de1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "690a6594-b5cf-4c10-8fb3-1bccc9b0ffa6",
            "title": "Get network domain",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testNet.js",
            "file": "/testNet.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return network domain",
                "fullTitle": "Testing Network Backend Get network domain should return network domain",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.get('/network')\n\t.send()\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\texpect(res.body).to.have.property('domain').equal('mired.com')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "05ba8568-7dbb-43d7-8503-6be6a992cb4d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "05ba8568-7dbb-43d7-8503-6be6a992cb4d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8434267a-c712-4150-aba7-33ca9962e746",
            "title": "Try deleting the network and recreating",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testNet.js",
            "file": "/testNet.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete network",
                "fullTitle": "Testing Network Backend Try deleting the network and recreating should delete network",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.delete('/network')\n\t.send()\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\t//expect(res.body).to.have.property('domain').equal('mired.com')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "777be43b-6050-4f8f-93f1-6871af8cd603",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "get domain of network deled should error",
                "fullTitle": "Testing Network Backend Try deleting the network and recreating get domain of network deled should error",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.get('/network')\n\t.send()\n\t.end( function(err,res){\n\t\tconsole.log(res.body)\n\t\texpect(res).to.have.status(500);\n\t\t//expect(res.body).to.have.property('domain').equal('mired.com')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "bc4c244b-4846-468c-8b0e-cc4a42e76655",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a network",
                "fullTitle": "Testing Network Backend Try deleting the network and recreating should create a network",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.post('/network')\n\t.send(net)\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\texpect(res.body).to.have.property('netDomain').equal('miredseg.com')\n\t\texpect(res.body).to.have.property('netName').equal('Miredseg')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "294bea54-138f-4e12-a0a8-d41ef872785f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return network domain",
                "fullTitle": "Testing Network Backend Try deleting the network and recreating should return network domain",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.get('/network')\n\t.send()\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\texpect(res.body).to.have.property('domain').equal('miredseg.com')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "c3e95427-5694-4a1e-a88a-3fb424745663",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "777be43b-6050-4f8f-93f1-6871af8cd603",
              "bc4c244b-4846-468c-8b0e-cc4a42e76655",
              "294bea54-138f-4e12-a0a8-d41ef872785f",
              "c3e95427-5694-4a1e-a88a-3fb424745663"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fcd350d4-16ee-4c21-bc1b-e2ed65d467d9",
        "title": "Testing Organization Backend",
        "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testOrgs.js",
        "file": "/testOrgs.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Testing Organization Backend \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "it('should delete network', (done) => {\n            chai.request(url)\n                .delete('/network')\n                .send()\n                .end( function(err,res){\n                    //console.log(res.body)\n                    expect(res).to.have.status(200);\n                    //expect(res.body).to.have.property('domain').equal('mired.com')\n                    done();\n                });\n        });\n        it('should create a network', (done) => {\n            chai.request(url)\n                .post('/network')\n                .send(net)\n                .end( function(err,res){\n                    //console.log(res.body)\n                    expect(res).to.have.status(200);\n                    expect(res.body).to.have.property('netDomain').equal('miredseg.com')\n                    expect(res.body).to.have.property('netName').equal('Miredseg')\n                    done();\n                });\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "c8d052c0-7309-4552-b0a3-fcb91c3b150b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c0f09986-8ac3-4c0e-bfb2-7e7035f6dcc0",
            "title": "Create org",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testOrgs.js",
            "file": "/testOrgs.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a org",
                "fullTitle": "Testing Organization Backend Create org should create a org",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// orgName: this.name,\n//     domain: this.orgId+'.'+this.domain,\n//     cas: [{\n//         casId: this.ca_name,\n//         caName: this.ca_name\n//     }],\n//     orgId:this.orgId,\n//     orgMSP: this.mspId\nchai.request(url)\n    .post('/orgs')\n    .send(org)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('orgName').equal('Org1')\n        expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n        expect(res.body).to.have.property('orgId').equal('org1')\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "070ba840-41cc-4513-bf65-07901d579bad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail create same org",
                "fullTitle": "Testing Organization Backend Create org should fail create same org",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .post('/orgs')\n        .send(org)\n        .end( function(err,res){\n            //console.log(res.body)\n            expect(res).to.have.status(400);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "084c6c34-6b7d-46ab-80d7-1772983654b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail create org without parameters",
                "fullTitle": "Testing Organization Backend Create org should fail create org without parameters",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .post('/orgs')\n        .send()\n        .end( function(err,res){\n            //console.log(res.body)\n            expect(res).to.have.status(400);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "57464c1f-c5d1-4171-ba0c-2fa154be9f2a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "070ba840-41cc-4513-bf65-07901d579bad",
              "084c6c34-6b7d-46ab-80d7-1772983654b5",
              "57464c1f-c5d1-4171-ba0c-2fa154be9f2a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "626f10f3-b6d1-4e33-af92-1ee9bacfa2d0",
            "title": "Get org",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testOrgs.js",
            "file": "/testOrgs.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should  get the org",
                "fullTitle": "Testing Organization Backend Get org should  get the org",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.property('orgName').equal('Org1')\n            expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n            expect(res.body).to.have.property('orgId').equal('org1')\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "e51f2c80-9007-42d1-bf60-63cace000022",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  fails not found",
                "fullTitle": "Testing Organization Backend Get org should  fails not found",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/asdf')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(404);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "36601e5d-0846-494c-ba0f-6af082bbd448",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a org2",
                "fullTitle": "Testing Organization Backend Get org should create a org2",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .post('/orgs')\n    .send(org2)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('domain').equal(org2.orgId+'.'+net.domain)\n        expect(res.body).to.have.property('orgName').equal(org2.name)\n        expect(res.body).to.have.property('orgMSP').equal(org2.mspId)\n        expect(res.body).to.have.property('orgId').equal(org2.orgId)\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e3920e74-9dd7-472d-aac0-0f5c865a14e4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  return two orgs",
                "fullTitle": "Testing Organization Backend Get org should  return two orgs",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('orgs').length(2)\n            //expect(res.body).to.have.property('orgs')\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "256ca41c-59be-4790-bdb7-9f7b3acf77d7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e51f2c80-9007-42d1-bf60-63cace000022",
              "36601e5d-0846-494c-ba0f-6af082bbd448",
              "e3920e74-9dd7-472d-aac0-0f5c865a14e4",
              "256ca41c-59be-4790-bdb7-9f7b3acf77d7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "12192de0-05bf-4e1a-aec1-b27708030d5f",
            "title": "Update org1",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testOrgs.js",
            "file": "/testOrgs.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should  update with nothing return the same org",
                "fullTitle": "Testing Organization Backend Update org1 should  update with nothing return the same org",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// req.body.name,req.body.orgId,req.body.domain,req.body.config\n    chai.request(url)\n        .put('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.property('orgName').equal('Org1')\n            expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n            expect(res.body).to.have.property('orgId').equal('org1')\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "e555f2ae-c412-4e3a-9e70-dbaccc9947a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  update name",
                "fullTitle": "Testing Organization Backend Update org1 should  update name",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// req.body.name,req.body.orgId,req.body.domain,req.body.config\nchai.request(url)\n    .put('/orgs/'+org.orgId)\n    .send({name:'OrgNew'})\n    .end( function(err,res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('orgName').equal('OrgNew')\n        expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n        expect(res.body).to.have.property('orgId').equal('org1')\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e3a965c1-5053-434c-b793-394c47eeb53f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  update MSP",
                "fullTitle": "Testing Organization Backend Update org1 should  update MSP",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// req.body.name,req.body.orgId,req.body.domain,req.body.config\nchai.request(url)\n    .put('/orgs/'+org.orgId)\n    .send({mspId:'newMSP'})\n    .end( function(err,res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('orgName').equal('OrgNew')\n        expect(res.body).to.have.property('orgMSP').equal('newMSP')\n        expect(res.body).to.have.property('orgId').equal('org1')\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "573bd022-7e06-4f2b-9464-64138a52c9af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  get the org updated",
                "fullTitle": "Testing Organization Backend Update org1 should  get the org updated",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.property('orgName').equal('OrgNew')\n            expect(res.body).to.have.property('orgMSP').equal('newMSP')\n            expect(res.body).to.have.property('orgId').equal('org1')\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "47937a3d-7e08-413f-ab6a-5a68935d49b2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e555f2ae-c412-4e3a-9e70-dbaccc9947a3",
              "e3a965c1-5053-434c-b793-394c47eeb53f",
              "573bd022-7e06-4f2b-9464-64138a52c9af",
              "47937a3d-7e08-413f-ab6a-5a68935d49b2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7099acff-ec8b-4172-94db-46adb29e0e4b",
            "title": "Deleting orgs",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testOrgs.js",
            "file": "/testOrgs.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should  not delete org not found",
                "fullTitle": "Testing Organization Backend Deleting orgs should  not delete org not found",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .delete('/orgs/asdf')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(404);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "b5fef5ab-c317-462d-b558-9870d0c9cd46",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  delete org1",
                "fullTitle": "Testing Organization Backend Deleting orgs should  delete org1",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .delete('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "94a7fdc6-1db3-4360-bfb6-faa031a56386",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  not get org deleted",
                "fullTitle": "Testing Organization Backend Deleting orgs should  not get org deleted",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(404);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "dcf5bea3-0aff-4b97-901a-24df944e28d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  all orgs be 1",
                "fullTitle": "Testing Organization Backend Deleting orgs should  all orgs be 1",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('orgs').length(1)\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "c643e189-8778-4543-8e54-53fad8643513",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create same org deleted",
                "fullTitle": "Testing Organization Backend Deleting orgs should create same org deleted",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .post('/orgs')\n                .send(org)\n                .end( function(err,res){\n                    //console.log(res.body)\n                    expect(res).to.have.status(200);\n                    expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n                    expect(res.body).to.have.property('orgName').equal('Org1')\n                    expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n                    expect(res.body).to.have.property('orgId').equal('org1')\n                    done();\n                });",
                "err": {},
                "isRoot": false,
                "uuid": "3e1c5d2c-1b80-4a59-b34d-2e82bb871a39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  delete org1 again",
                "fullTitle": "Testing Organization Backend Deleting orgs should  delete org1 again",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .delete('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "a04b6d82-a68c-4409-b3c2-f89bc8a327ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should   delete org2 ",
                "fullTitle": "Testing Organization Backend Deleting orgs should   delete org2 ",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .delete('/orgs/'+org2.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "ea9aa6c4-0a15-492c-9ddd-e2568173c19b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  all orgs be 0",
                "fullTitle": "Testing Organization Backend Deleting orgs should  all orgs be 0",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('orgs').length(0)\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "cea56788-87f8-48b2-b55e-7530ef688ee2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b5fef5ab-c317-462d-b558-9870d0c9cd46",
              "94a7fdc6-1db3-4360-bfb6-faa031a56386",
              "dcf5bea3-0aff-4b97-901a-24df944e28d8",
              "c643e189-8778-4543-8e54-53fad8643513",
              "3e1c5d2c-1b80-4a59-b34d-2e82bb871a39",
              "a04b6d82-a68c-4409-b3c2-f89bc8a327ff",
              "ea9aa6c4-0a15-492c-9ddd-e2568173c19b",
              "cea56788-87f8-48b2-b55e-7530ef688ee2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 34,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b52e7536-25c4-4565-b5fe-907a166b7256",
        "title": "Testing Peers Backend",
        "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
        "file": "/testPeers.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fc7cb896-f3e3-49b2-b225-b0352eedad75",
            "title": "Reseting..",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
            "file": "/testPeers.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete network",
                "fullTitle": "Testing Peers Backend Reseting.. should delete network",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .delete('/network')\n    .send()\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200)\n        //expect(res.body).to.have.property('domain').equal('mired.com')\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "4e071415-0c1c-4762-8a8f-e3bb2c927f29",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a network",
                "fullTitle": "Testing Peers Backend Reseting.. should create a network",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .post('/network')\n    .send(net)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('netDomain').equal('miredseg.com')\n        expect(res.body).to.have.property('netName').equal('Miredseg')\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "ea0b72dd-8707-4d3c-97e5-18da6b315762",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a org",
                "fullTitle": "Testing Peers Backend Reseting.. should create a org",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .post('/orgs')\n    .send(org)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('orgName').equal('Org1')\n        expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n        expect(res.body).to.have.property('orgId').equal('org1')\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "a6e71a76-5c12-4448-97a5-5debb31a096f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a org2",
                "fullTitle": "Testing Peers Backend Reseting.. should create a org2",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .post('/orgs')\n    .send(org2)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "b5ed000d-7767-446d-896e-1aea5092c0c7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4e071415-0c1c-4762-8a8f-e3bb2c927f29",
              "ea0b72dd-8707-4d3c-97e5-18da6b315762",
              "a6e71a76-5c12-4448-97a5-5debb31a096f",
              "b5ed000d-7767-446d-896e-1aea5092c0c7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2bbe09fd-d0cf-43b7-8bf4-184b85b8b18e",
            "title": "Create Peer",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
            "file": "/testPeers.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a peer in org1",
                "fullTitle": "Testing Peers Backend Create Peer should create a peer in org1",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .post('/orgs/'+org.orgId+'/peers')\n                .send(newPeer('peer1',org.orgId,config1))\n                .end( function(err,res){\n                        //  PeerId: this.id,\n                        // PeerAllId:this.id +'.'+this.domain,\n                        // Domain: this.domain,\n                        // ExtPort: this.config.extPort,\n                        // IntPort: this.config.intPort,\n                        // ExtGossipPort: this.config.extGossipPort,\n                        // IntGossipPort: this.config.intGossipPort,\n                        // isAnchor: this.config.anchor,\n                        // extra:this.config.extra\n                    expect(res).to.have.status(200)\n                    expect(res.body).to.have.property('PeerId').equal(peer.id)\n                    expect(res.body).to.have.property('Domain').equal('org1.miredseg.com')\n                    expect(res.body).to.have.property('IntPort').equal(7050)\n                    expect(res.body).to.have.property('IntGossipPort').equal(7063)\n                    expect(res.body).to.have.property('ExtGossipPort').equal(7063)\n                    expect(res.body).to.have.property('isAnchor').equal(true)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "3c7e48bf-5766-4e47-8487-68f625754afa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail create same peer",
                "fullTitle": "Testing Peers Backend Create Peer should fail create same peer",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .post('/orgs/'+org.orgId+'/peers')\n        .send(peer)\n        .end( function(err,res){\n            //console.log(res.body)\n            expect(res).to.have.status(400)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "919eec3b-5ca9-4d9f-ad7b-8f94572deb41",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail  create a peer in org not created",
                "fullTitle": "Testing Peers Backend Create Peer should fail  create a peer in org not created",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .post('/orgs/'+org.orgId+'/peers')\n                .send(newPeer('peer1','asdf',config1))\n                .end( function(err,res){\n                    expect(res).to.have.status(404)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "2fd9955f-bd9d-4de7-842c-6b0ae8aa40af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail  create a peer with wrong config",
                "fullTitle": "Testing Peers Backend Create Peer should fail  create a peer with wrong config",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .post('/orgs/'+org.orgId+'/peers')\n                .send(newPeer('peer2',org.orgId,{}))\n                .end( function(err,res){\n                    expect(res).to.have.status(400)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "6ad2ffea-2054-4948-b935-002b3b501139",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail  create another peer minumun config in org1",
                "fullTitle": "Testing Peers Backend Create Peer should fail  create another peer minumun config in org1",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .post('/orgs/'+org.orgId+'/peers')\n                .send(newPeer('peer2',org.orgId,configWithOutElements))\n                .end( function(err,res){\n                    expect(res.body).to.have.property('PeerId').equal('peer2')\n                    expect(res.body).to.have.property('Domain').equal('org1.miredseg.com')\n                    expect(res.body).to.have.property('IntPort').equal(7050)\n                    expect(res.body).to.have.property('IntGossipPort').equal(7053)\n                    expect(res.body).to.have.property('isAnchor').equal(false)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "102491eb-b7f5-4e59-9a28-7784f396df97",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3c7e48bf-5766-4e47-8487-68f625754afa",
              "919eec3b-5ca9-4d9f-ad7b-8f94572deb41",
              "2fd9955f-bd9d-4de7-842c-6b0ae8aa40af",
              "6ad2ffea-2054-4948-b935-002b3b501139",
              "102491eb-b7f5-4e59-9a28-7784f396df97"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "71feb702-a8d7-409d-95b0-468c61af0f8d",
            "title": "Getting Peers",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
            "file": "/testPeers.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail  get peer of unexisting org",
                "fullTitle": "Testing Peers Backend Getting Peers should fail  get peer of unexisting org",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .get('/orgs/'+'asdf'+'/peers/peer1')\n                .send()\n                .end( function(err,res){\n                    expect(res).to.have.status(404)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "5ce1e0bd-5a9c-4f06-83ff-9513186551eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail  get unexisting peer of  org",
                "fullTitle": "Testing Peers Backend Getting Peers should fail  get unexisting peer of  org",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .get('/orgs/'+org.orgId+'/peers/peer3')\n                .send()\n                .end( function(err,res){\n                    expect(res).to.have.status(404)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "31110308-20c5-41b6-ab1c-528fd68625a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should   get  peer1 of  org",
                "fullTitle": "Testing Peers Backend Getting Peers should   get  peer1 of  org",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .get('/orgs/'+org.orgId+'/peers/peer1')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('PeerId').equal(peer.id)\n        expect(res.body).to.have.property('Domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('IntPort').equal(7050)\n        expect(res.body).to.have.property('IntGossipPort').equal(7063)\n        expect(res.body).to.have.property('ExtGossipPort').equal(7063)\n        expect(res.body).to.have.property('isAnchor').equal(true)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "0180875b-314a-49af-ba3d-6a515e73ff6e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should   get  peer2 of  org",
                "fullTitle": "Testing Peers Backend Getting Peers should   get  peer2 of  org",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .get('/orgs/'+org.orgId+'/peers/peer2')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('PeerId').equal('peer2')\n        expect(res.body).to.have.property('Domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('IntPort').equal(7050)\n        expect(res.body).to.have.property('IntGossipPort').equal(7053)\n        expect(res.body).to.have.property('isAnchor').equal(false)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "ff4d5068-6c71-48a3-8ef6-6c3bb665702b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  fails  get a created peer of other org",
                "fullTitle": "Testing Peers Backend Getting Peers should  fails  get a created peer of other org",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .get('/orgs/'+'org2'+'/peers/peer2')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(404)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "44b625ee-b972-4c51-be5c-85fe5890f27a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  return two peers from org1",
                "fullTitle": "Testing Peers Backend Getting Peers should  return two peers from org1",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+org.orgId+'/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200)\n            expect(res.body).to.have.property('peers').length(2)\n            //expect(res.body).to.have.property('orgs')\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "585996e1-f555-421f-928b-da2a5191dd47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  return empty from org1",
                "fullTitle": "Testing Peers Backend Getting Peers should  return empty from org1",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+'org2'+'/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200)\n            expect(res.body).to.have.property('peers').length(0)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "ee1bdc5a-e56e-4386-89ef-1772f7d72bfb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  fail for unexisting org ",
                "fullTitle": "Testing Peers Backend Getting Peers should  fail for unexisting org ",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+'aasdf'+'/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(404)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "08c8d351-4029-451e-8119-d7e3178ce99a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  return peers by orgs (two for org1 and 0 for org2) ",
                "fullTitle": "Testing Peers Backend Getting Peers should  return peers by orgs (two for org1 and 0 for org2) ",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200)\n            expect(res.body).to.have.property('orgs').length(2)\n            expect(res.body).to.have.nested.property('orgs[0]').to.have.property('peers').length(2)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].PeerId').equal(peer.id)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].Domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].IntPort').equal(7050)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].IntGossipPort').equal(7063)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].ExtGossipPort').equal(7063)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].isAnchor').equal(true)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].PeerId').equal('peer2')\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].Domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntPort').equal(7050)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntGossipPort').equal(7053)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].isAnchor').equal(false)\n            expect(res.body).to.have.nested.property('orgs[1]').to.have.property('peers').length(0)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "b1d9c62f-41f4-43a7-80a8-866419c1008e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5ce1e0bd-5a9c-4f06-83ff-9513186551eb",
              "31110308-20c5-41b6-ab1c-528fd68625a3",
              "0180875b-314a-49af-ba3d-6a515e73ff6e",
              "ff4d5068-6c71-48a3-8ef6-6c3bb665702b",
              "44b625ee-b972-4c51-be5c-85fe5890f27a",
              "585996e1-f555-421f-928b-da2a5191dd47",
              "ee1bdc5a-e56e-4386-89ef-1772f7d72bfb",
              "08c8d351-4029-451e-8119-d7e3178ce99a",
              "b1d9c62f-41f4-43a7-80a8-866419c1008e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 41,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5bd65195-241d-41f4-b702-6d081bef455c",
            "title": "Updating  Peers",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
            "file": "/testPeers.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail update  peer1 unexisting  org",
                "fullTitle": "Testing Peers Backend Updating  Peers should fail update  peer1 unexisting  org",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .put('/orgs/'+'asdf'+'/peers/peer1')\n    .send({config:config1})\n    .end( function(err,res){\n        expect(res).to.have.status(404)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "eefb0034-5d7c-461c-baac-9641ed3e0779",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail update unknow peer of  org1",
                "fullTitle": "Testing Peers Backend Updating  Peers should fail update unknow peer of  org1",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .put('/orgs/'+org.orgId+'/peers/peer34')\n    .send({config:config1})\n    .end( function(err,res){\n        expect(res).to.have.status(404)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "2e3286df-5635-4d48-957e-2869ea766b53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should   update  peer1 of  org",
                "fullTitle": "Testing Peers Backend Updating  Peers should   update  peer1 of  org",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .put('/orgs/'+org.orgId+'/peers/peer1')\n    .send({config:configWithOutElements})\n    .end( function(err,res){\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('PeerId').equal(peer.id)\n        expect(res.body).to.have.property('Domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('IntPort').equal(7050)\n        expect(res.body).to.have.property('IntGossipPort').equal(7053)\n        expect(res.body).to.have.property('isAnchor').equal(false)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "c02ecda1-2c23-4582-8f4e-958be4e0252b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  get peer updated in org1 ",
                "fullTitle": "Testing Peers Backend Updating  Peers should  get peer updated in org1 ",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200)\n            expect(res.body).to.have.property('orgs').length(2)\n            expect(res.body).to.have.nested.property('orgs[0]').to.have.property('peers').length(2)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].PeerId').equal(peer.id)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].Domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntPort').equal(7050)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntGossipPort').equal(7053)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].isAnchor').equal(false)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].PeerId').equal('peer2')\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].Domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntPort').equal(7050)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntGossipPort').equal(7053)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].isAnchor').equal(false)\n            expect(res.body).to.have.nested.property('orgs[1]').to.have.property('peers').length(0)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "cb3000af-de41-4f02-a526-574ac5e37812",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eefb0034-5d7c-461c-baac-9641ed3e0779",
              "2e3286df-5635-4d48-957e-2869ea766b53",
              "c02ecda1-2c23-4582-8f4e-958be4e0252b",
              "cb3000af-de41-4f02-a526-574ac5e37812"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b63b4aa6-bfba-4915-8be3-b2ebe8ad9006",
            "title": "Deleting  Peers",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
            "file": "/testPeers.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail deleting unknow org",
                "fullTitle": "Testing Peers Backend Deleting  Peers should fail deleting unknow org",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .delete('/orgs/'+'adsaf'+'/peers/peer1')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(404)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "6d2d0861-f1c1-429b-b614-6552979f8faa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail deleting unknow peer",
                "fullTitle": "Testing Peers Backend Deleting  Peers should fail deleting unknow peer",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .delete('/orgs/'+org.orgId+'/peers/peer36')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(404)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "047d5567-df7c-4e2d-8741-710a6a05dca0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete  peer1",
                "fullTitle": "Testing Peers Backend Deleting  Peers should delete  peer1",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .delete('/orgs/'+org.orgId+'/peers/peer1')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(200)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "6697fd41-7693-4ef5-9424-57de0f9bbe74",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail  get deleted peer1 of  org",
                "fullTitle": "Testing Peers Backend Deleting  Peers should fail  get deleted peer1 of  org",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .get('/orgs/'+org.orgId+'/peers/peer1')\n                .send()\n                .end( function(err,res){\n                    expect(res).to.have.status(404)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "77afd84a-dc56-4745-afaf-f59e8e2ab332",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete  peer2",
                "fullTitle": "Testing Peers Backend Deleting  Peers should delete  peer2",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .delete('/orgs/'+org.orgId+'/peers/peer2')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(200)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "312b293c-de5b-47b5-a9bb-66c93c3c6d0f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  get 0 peers from orgs ",
                "fullTitle": "Testing Peers Backend Deleting  Peers should  get 0 peers from orgs ",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200)\n            expect(res.body).to.have.property('orgs').length(2)\n            expect(res.body).to.have.nested.property('orgs[0]').to.have.property('peers').length(0)\n            expect(res.body).to.have.nested.property('orgs[1]').to.have.property('peers').length(0)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "2d5ce0c5-08fe-4874-964b-ca2c0ad33f12",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6d2d0861-f1c1-429b-b614-6552979f8faa",
              "047d5567-df7c-4e2d-8741-710a6a05dca0",
              "6697fd41-7693-4ef5-9424-57de0f9bbe74",
              "77afd84a-dc56-4745-afaf-f59e8e2ab332",
              "312b293c-de5b-47b5-a9bb-66c93c3c6d0f",
              "2d5ce0c5-08fe-4874-964b-ca2c0ad33f12"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [
      "1af47a1b-99fc-4ff8-9c28-00aabb9c93a7",
      "a578b11a-0735-43e6-bf9b-46e9961ed0d1"
    ],
    "duration": 0,
    "root": true,
    "rootEmpty": false,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}