{
  "stats": {
    "suites": 16,
    "tests": 56,
    "passes": 56,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-09T14:44:20.120Z",
    "end": "2019-05-09T14:44:20.468Z",
    "duration": 348,
    "testsRegistered": 58,
    "passPercent": 96.6,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e8f69aa1-0d49-4c06-8b9a-967e8716c0ac",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [
      {
        "title": "should delete network",
        "fullTitle": "should delete network",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "chai.request(url)\n    .delete('/network')\n    .send()\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200);\n        //expect(res.body).to.have.property('domain').equal('mired.com')\n        done();\n    });",
        "err": {},
        "isRoot": true,
        "uuid": "5311d030-7921-44a9-86c2-1a10439f37c9",
        "isHook": false,
        "skipped": true
      },
      {
        "title": "should create a network",
        "fullTitle": "should create a network",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "chai.request(url)\n    .post('/network')\n    .send(net)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('netDomain').equal('miredseg.com')\n        expect(res.body).to.have.property('netName').equal('Miredseg')\n        done();\n    });",
        "err": {},
        "isRoot": true,
        "uuid": "107eff79-7bda-41f4-8470-d5a88b3e0c25",
        "isHook": false,
        "skipped": true
      }
    ],
    "suites": [
      {
        "uuid": "8a7fdc5f-425c-4c6a-adc8-785f45b2a990",
        "title": "Testing Network Backend",
        "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testNet.js",
        "file": "/testNet.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "60977510-2613-484f-8667-4e091bab0438",
            "title": "Reseting..",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testNet.js",
            "file": "/testNet.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete network",
                "fullTitle": "Testing Network Backend Reseting.. should delete network",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.delete('/network')\n\t.send()\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\t//expect(res.body).to.have.property('domain').equal('mired.com')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "bdb19c88-933c-407f-82fb-2db6e62ee26b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bdb19c88-933c-407f-82fb-2db6e62ee26b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 39,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0c31be24-6761-4eba-ab29-b9d91c069ccf",
            "title": "Create a network",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testNet.js",
            "file": "/testNet.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a network",
                "fullTitle": "Testing Network Backend Create a network should create a network",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.post('/network')\n\t.send(net)\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\texpect(res.body).to.have.property('netDomain').equal('mired.com')\n\t\texpect(res.body).to.have.property('netName').equal('Mired')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "c6112115-ec37-4dc9-9754-36e64d863de2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return bad request",
                "fullTitle": "Testing Network Backend Create a network should return bad request",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.post('/network')\n\t.send({domian:''})\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(404);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "f5445ad1-f616-4ce7-ad3b-89cd3e35749e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should error  creating a new network existing one",
                "fullTitle": "Testing Network Backend Create a network should error  creating a new network existing one",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.post('/network')\n\t.send(net)\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(500);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "f9856473-0deb-4608-a002-580b8fdb01c9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c6112115-ec37-4dc9-9754-36e64d863de2",
              "f5445ad1-f616-4ce7-ad3b-89cd3e35749e",
              "f9856473-0deb-4608-a002-580b8fdb01c9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 38,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9d8e290e-bb7a-4b42-b335-1fe09f219d31",
            "title": "Get network domain",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testNet.js",
            "file": "/testNet.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return network domain",
                "fullTitle": "Testing Network Backend Get network domain should return network domain",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.get('/network')\n\t.send()\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\texpect(res.body).to.have.property('domain').equal('mired.com')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "4aef9a8b-9578-453b-afa1-892c07195214",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4aef9a8b-9578-453b-afa1-892c07195214"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b391697d-00d7-4046-8271-92944cb4dc18",
            "title": "Try deleting the network and recreating",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testNet.js",
            "file": "/testNet.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete network",
                "fullTitle": "Testing Network Backend Try deleting the network and recreating should delete network",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.delete('/network')\n\t.send()\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\t//expect(res.body).to.have.property('domain').equal('mired.com')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "02823a4f-2927-4b4a-8ff9-8526bd3a18f6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "get domain of network deled should error",
                "fullTitle": "Testing Network Backend Try deleting the network and recreating get domain of network deled should error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.get('/network')\n\t.send()\n\t.end( function(err,res){\n\t\tconsole.log(res.body)\n\t\texpect(res).to.have.status(500);\n\t\t//expect(res.body).to.have.property('domain').equal('mired.com')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "85618b33-88bc-47bc-9ef9-5ddc9d9e0419",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a network",
                "fullTitle": "Testing Network Backend Try deleting the network and recreating should create a network",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.post('/network')\n\t.send(net)\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\texpect(res.body).to.have.property('netDomain').equal('miredseg.com')\n\t\texpect(res.body).to.have.property('netName').equal('Miredseg')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "a1924243-04ab-4ecc-9b57-c7c96dcdae48",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return network domain",
                "fullTitle": "Testing Network Backend Try deleting the network and recreating should return network domain",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n\t.get('/network')\n\t.send()\n\t.end( function(err,res){\n\t\t//console.log(res.body)\n\t\texpect(res).to.have.status(200);\n\t\texpect(res.body).to.have.property('domain').equal('miredseg.com')\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "4c2f9f0f-6900-4946-807e-06d356dc9b87",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "02823a4f-2927-4b4a-8ff9-8526bd3a18f6",
              "85618b33-88bc-47bc-9ef9-5ddc9d9e0419",
              "a1924243-04ab-4ecc-9b57-c7c96dcdae48",
              "4c2f9f0f-6900-4946-807e-06d356dc9b87"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "953dcc2a-7803-41d3-9966-217da17ca96a",
        "title": "Testing Organization Backend",
        "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testOrgs.js",
        "file": "/testOrgs.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Testing Organization Backend \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "it('should delete network', (done) => {\n            chai.request(url)\n                .delete('/network')\n                .send()\n                .end( function(err,res){\n                    //console.log(res.body)\n                    expect(res).to.have.status(200);\n                    //expect(res.body).to.have.property('domain').equal('mired.com')\n                    done();\n                });\n        });\n        it('should create a network', (done) => {\n            chai.request(url)\n                .post('/network')\n                .send(net)\n                .end( function(err,res){\n                    //console.log(res.body)\n                    expect(res).to.have.status(200);\n                    expect(res.body).to.have.property('netDomain').equal('miredseg.com')\n                    expect(res.body).to.have.property('netName').equal('Miredseg')\n                    done();\n                });\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "51bf348b-386b-4fba-a7cc-9f15c7324ffa",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9b78c3a6-83d5-4dc2-a409-f836b566cbea",
            "title": "Create org",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testOrgs.js",
            "file": "/testOrgs.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a org",
                "fullTitle": "Testing Organization Backend Create org should create a org",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// orgName: this.name,\n//     domain: this.orgId+'.'+this.domain,\n//     cas: [{\n//         casId: this.ca_name,\n//         caName: this.ca_name\n//     }],\n//     orgId:this.orgId,\n//     orgMSP: this.mspId\nchai.request(url)\n    .post('/orgs')\n    .send(org)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('orgName').equal('Org1')\n        expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n        expect(res.body).to.have.property('orgId').equal('org1')\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b2df8a9f-729d-4046-8d24-354658b8681e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail create same org",
                "fullTitle": "Testing Organization Backend Create org should fail create same org",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .post('/orgs')\n        .send(org)\n        .end( function(err,res){\n            //console.log(res.body)\n            expect(res).to.have.status(400);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "bbd371f2-96a9-4ed5-be20-4cee25655242",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail create org without parameters",
                "fullTitle": "Testing Organization Backend Create org should fail create org without parameters",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .post('/orgs')\n        .send()\n        .end( function(err,res){\n            //console.log(res.body)\n            expect(res).to.have.status(400);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "fab9fb73-278f-4b62-b71d-90e0e61c597c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b2df8a9f-729d-4046-8d24-354658b8681e",
              "bbd371f2-96a9-4ed5-be20-4cee25655242",
              "fab9fb73-278f-4b62-b71d-90e0e61c597c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2919bbce-8f3e-4fa8-a660-b35e48b0dfc4",
            "title": "Get org",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testOrgs.js",
            "file": "/testOrgs.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should  get the org",
                "fullTitle": "Testing Organization Backend Get org should  get the org",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.property('orgName').equal('Org1')\n            expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n            expect(res.body).to.have.property('orgId').equal('org1')\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "2a4d778c-5764-48e5-b183-aae798cd4c13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  fails not found",
                "fullTitle": "Testing Organization Backend Get org should  fails not found",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/asdf')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(404);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "49301bec-f6cd-4259-acb6-3fa0b89e5409",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a org2",
                "fullTitle": "Testing Organization Backend Get org should create a org2",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .post('/orgs')\n    .send(org2)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('domain').equal(org2.orgId+'.'+net.domain)\n        expect(res.body).to.have.property('orgName').equal(org2.name)\n        expect(res.body).to.have.property('orgMSP').equal(org2.mspId)\n        expect(res.body).to.have.property('orgId').equal(org2.orgId)\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5d9f531a-e614-41a2-9ebe-ec27e4752eab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  return two orgs",
                "fullTitle": "Testing Organization Backend Get org should  return two orgs",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('orgs').length(2)\n            //expect(res.body).to.have.property('orgs')\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "2443ffcf-1f4e-41a5-9098-4d429308f579",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2a4d778c-5764-48e5-b183-aae798cd4c13",
              "49301bec-f6cd-4259-acb6-3fa0b89e5409",
              "5d9f531a-e614-41a2-9ebe-ec27e4752eab",
              "2443ffcf-1f4e-41a5-9098-4d429308f579"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4a2eafcd-e2a3-46a1-a984-b915d74e662c",
            "title": "Update org1",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testOrgs.js",
            "file": "/testOrgs.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should  update with nothing return the same org",
                "fullTitle": "Testing Organization Backend Update org1 should  update with nothing return the same org",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// req.body.name,req.body.orgId,req.body.domain,req.body.config\n    chai.request(url)\n        .put('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.property('orgName').equal('Org1')\n            expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n            expect(res.body).to.have.property('orgId').equal('org1')\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "b69a2b97-b238-45a2-a65a-19d6262e8ec8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  update name",
                "fullTitle": "Testing Organization Backend Update org1 should  update name",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// req.body.name,req.body.orgId,req.body.domain,req.body.config\nchai.request(url)\n    .put('/orgs/'+org.orgId)\n    .send({name:'OrgNew'})\n    .end( function(err,res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('orgName').equal('OrgNew')\n        expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n        expect(res.body).to.have.property('orgId').equal('org1')\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8f0df403-61e6-4184-bca1-1c8c080ef332",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  update MSP",
                "fullTitle": "Testing Organization Backend Update org1 should  update MSP",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// req.body.name,req.body.orgId,req.body.domain,req.body.config\nchai.request(url)\n    .put('/orgs/'+org.orgId)\n    .send({mspId:'newMSP'})\n    .end( function(err,res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('orgName').equal('OrgNew')\n        expect(res.body).to.have.property('orgMSP').equal('newMSP')\n        expect(res.body).to.have.property('orgId').equal('org1')\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a3f8bf01-19dc-4b35-ba9b-e908682b272c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  get the org updated",
                "fullTitle": "Testing Organization Backend Update org1 should  get the org updated",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.property('orgName').equal('OrgNew')\n            expect(res.body).to.have.property('orgMSP').equal('newMSP')\n            expect(res.body).to.have.property('orgId').equal('org1')\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "01473f58-36f2-4464-8c55-5aca0ea26468",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b69a2b97-b238-45a2-a65a-19d6262e8ec8",
              "8f0df403-61e6-4184-bca1-1c8c080ef332",
              "a3f8bf01-19dc-4b35-ba9b-e908682b272c",
              "01473f58-36f2-4464-8c55-5aca0ea26468"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "43778465-e9c2-4847-bf3f-9fab859af24c",
            "title": "Deleting orgs",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testOrgs.js",
            "file": "/testOrgs.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should  not delete org not found",
                "fullTitle": "Testing Organization Backend Deleting orgs should  not delete org not found",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .delete('/orgs/asdf')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(404);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "e395efe7-ae39-4791-9641-10e22de19f5c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  delete org1",
                "fullTitle": "Testing Organization Backend Deleting orgs should  delete org1",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .delete('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "faf612d1-8506-4e98-949c-385d57cac5d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  not get org deleted",
                "fullTitle": "Testing Organization Backend Deleting orgs should  not get org deleted",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(404);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "f1f530f4-2513-48cd-9bd9-e12b2cd1a914",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  all orgs be 1",
                "fullTitle": "Testing Organization Backend Deleting orgs should  all orgs be 1",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('orgs').length(1)\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "bab934c0-b683-46db-89aa-cc7d69b88ff0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create same org deleted",
                "fullTitle": "Testing Organization Backend Deleting orgs should create same org deleted",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .post('/orgs')\n                .send(org)\n                .end( function(err,res){\n                    //console.log(res.body)\n                    expect(res).to.have.status(200);\n                    expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n                    expect(res.body).to.have.property('orgName').equal('Org1')\n                    expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n                    expect(res.body).to.have.property('orgId').equal('org1')\n                    done();\n                });",
                "err": {},
                "isRoot": false,
                "uuid": "58ff33e3-b675-4a76-ac23-a2c9d8d2c3b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  delete org1 again",
                "fullTitle": "Testing Organization Backend Deleting orgs should  delete org1 again",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .delete('/orgs/'+org.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "8364679f-e176-46ea-af49-3cde3ed890a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should   delete org2 ",
                "fullTitle": "Testing Organization Backend Deleting orgs should   delete org2 ",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .delete('/orgs/'+org2.orgId)\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "df46bff7-e2c3-438b-9d39-8e10f3d13993",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  all orgs be 0",
                "fullTitle": "Testing Organization Backend Deleting orgs should  all orgs be 0",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200);\n            expect(res.body).to.have.property('orgs').length(0)\n            done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "6bda5110-55b3-40ac-a84c-76bf82ca7afc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e395efe7-ae39-4791-9641-10e22de19f5c",
              "faf612d1-8506-4e98-949c-385d57cac5d4",
              "f1f530f4-2513-48cd-9bd9-e12b2cd1a914",
              "bab934c0-b683-46db-89aa-cc7d69b88ff0",
              "58ff33e3-b675-4a76-ac23-a2c9d8d2c3b1",
              "8364679f-e176-46ea-af49-3cde3ed890a4",
              "df46bff7-e2c3-438b-9d39-8e10f3d13993",
              "6bda5110-55b3-40ac-a84c-76bf82ca7afc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 29,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2c6f8184-6e28-4594-b16c-ab3e94bc1b2f",
        "title": "Testing Peers Backend",
        "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
        "file": "/testPeers.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6f0ced2d-c249-4290-ad39-74c6ed9b543a",
            "title": "Reseting..",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
            "file": "/testPeers.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete network",
                "fullTitle": "Testing Peers Backend Reseting.. should delete network",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .delete('/network')\n    .send()\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200)\n        //expect(res.body).to.have.property('domain').equal('mired.com')\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "b20c6f5e-cab4-4576-9239-383121f1167b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a network",
                "fullTitle": "Testing Peers Backend Reseting.. should create a network",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .post('/network')\n    .send(net)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('netDomain').equal('miredseg.com')\n        expect(res.body).to.have.property('netName').equal('Miredseg')\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "01cdfa34-8d46-4e1b-a243-e8661d2bc0a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a org",
                "fullTitle": "Testing Peers Backend Reseting.. should create a org",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .post('/orgs')\n    .send(org)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('orgName').equal('Org1')\n        expect(res.body).to.have.property('orgMSP').equal('orgMSP')\n        expect(res.body).to.have.property('orgId').equal('org1')\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "7c9a4251-0dad-4489-82b5-ed9fc6b38c53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a org2",
                "fullTitle": "Testing Peers Backend Reseting.. should create a org2",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .post('/orgs')\n    .send(org2)\n    .end( function(err,res){\n        //console.log(res.body)\n        expect(res).to.have.status(200)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "2bd82dc0-07e9-4ae6-9242-601c00115a33",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b20c6f5e-cab4-4576-9239-383121f1167b",
              "01cdfa34-8d46-4e1b-a243-e8661d2bc0a6",
              "7c9a4251-0dad-4489-82b5-ed9fc6b38c53",
              "2bd82dc0-07e9-4ae6-9242-601c00115a33"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "641dc450-1039-421f-b95b-ac23eb516696",
            "title": "Create Peer",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
            "file": "/testPeers.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a peer in org1",
                "fullTitle": "Testing Peers Backend Create Peer should create a peer in org1",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .post('/orgs/'+org.orgId+'/peers')\n                .send(newPeer('peer1',org.orgId,config1))\n                .end( function(err,res){\n                        //  PeerId: this.id,\n                        // PeerAllId:this.id +'.'+this.domain,\n                        // Domain: this.domain,\n                        // ExtPort: this.config.extPort,\n                        // IntPort: this.config.intPort,\n                        // ExtGossipPort: this.config.extGossipPort,\n                        // IntGossipPort: this.config.intGossipPort,\n                        // isAnchor: this.config.anchor,\n                        // extra:this.config.extra\n                    expect(res).to.have.status(200)\n                    expect(res.body).to.have.property('PeerId').equal(peer.id)\n                    expect(res.body).to.have.property('Domain').equal('org1.miredseg.com')\n                    expect(res.body).to.have.property('IntPort').equal(7050)\n                    expect(res.body).to.have.property('IntGossipPort').equal(7063)\n                    expect(res.body).to.have.property('ExtGossipPort').equal(7063)\n                    expect(res.body).to.have.property('isAnchor').equal(true)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "977629ab-0207-46e4-a71b-f24fc15a7c65",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail create same peer",
                "fullTitle": "Testing Peers Backend Create Peer should fail create same peer",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .post('/orgs/'+org.orgId+'/peers')\n        .send(peer)\n        .end( function(err,res){\n            //console.log(res.body)\n            expect(res).to.have.status(400)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "3736c9e4-9113-4fdc-8f84-b43e3066f65f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail  create a peer in org not created",
                "fullTitle": "Testing Peers Backend Create Peer should fail  create a peer in org not created",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .post('/orgs/'+org.orgId+'/peers')\n                .send(newPeer('peer1','asdf',config1))\n                .end( function(err,res){\n                    expect(res).to.have.status(404)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "041f58a9-4e2d-4824-8d9b-9b0a0d199dc1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail  create a peer with wrong config",
                "fullTitle": "Testing Peers Backend Create Peer should fail  create a peer with wrong config",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .post('/orgs/'+org.orgId+'/peers')\n                .send(newPeer('peer2',org.orgId,{}))\n                .end( function(err,res){\n                    expect(res).to.have.status(400)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "d0b31766-7abd-404d-aadc-2b06d0434590",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail  create another peer minumun config in org1",
                "fullTitle": "Testing Peers Backend Create Peer should fail  create another peer minumun config in org1",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .post('/orgs/'+org.orgId+'/peers')\n                .send(newPeer('peer2',org.orgId,configWithOutElements))\n                .end( function(err,res){\n                    expect(res.body).to.have.property('PeerId').equal('peer2')\n                    expect(res.body).to.have.property('Domain').equal('org1.miredseg.com')\n                    expect(res.body).to.have.property('IntPort').equal(7050)\n                    expect(res.body).to.have.property('IntGossipPort').equal(7053)\n                    expect(res.body).to.have.property('isAnchor').equal(false)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "c10695d3-6752-42a8-9596-0c1ff5e2d4f6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "977629ab-0207-46e4-a71b-f24fc15a7c65",
              "3736c9e4-9113-4fdc-8f84-b43e3066f65f",
              "041f58a9-4e2d-4824-8d9b-9b0a0d199dc1",
              "d0b31766-7abd-404d-aadc-2b06d0434590",
              "c10695d3-6752-42a8-9596-0c1ff5e2d4f6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 23,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ad69fb8f-f2cd-4e8f-93dc-371da80d58da",
            "title": "Getting Peers",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
            "file": "/testPeers.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail  get peer of unexisting org",
                "fullTitle": "Testing Peers Backend Getting Peers should fail  get peer of unexisting org",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .get('/orgs/'+'asdf'+'/peers/peer1')\n                .send()\n                .end( function(err,res){\n                    expect(res).to.have.status(404)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "96235f41-843a-4e29-802f-76ef74d4be3d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail  get unexisting peer of  org",
                "fullTitle": "Testing Peers Backend Getting Peers should fail  get unexisting peer of  org",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .get('/orgs/'+org.orgId+'/peers/peer3')\n                .send()\n                .end( function(err,res){\n                    expect(res).to.have.status(404)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "139f554e-dcce-434f-93fb-88b8e5cc49b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should   get  peer1 of  org",
                "fullTitle": "Testing Peers Backend Getting Peers should   get  peer1 of  org",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .get('/orgs/'+org.orgId+'/peers/peer1')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('PeerId').equal(peer.id)\n        expect(res.body).to.have.property('Domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('IntPort').equal(7050)\n        expect(res.body).to.have.property('IntGossipPort').equal(7063)\n        expect(res.body).to.have.property('ExtGossipPort').equal(7063)\n        expect(res.body).to.have.property('isAnchor').equal(true)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "2f95481f-7de1-40ac-bd36-98b049561c12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should   get  peer2 of  org",
                "fullTitle": "Testing Peers Backend Getting Peers should   get  peer2 of  org",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .get('/orgs/'+org.orgId+'/peers/peer2')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('PeerId').equal('peer2')\n        expect(res.body).to.have.property('Domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('IntPort').equal(7050)\n        expect(res.body).to.have.property('IntGossipPort').equal(7053)\n        expect(res.body).to.have.property('isAnchor').equal(false)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "2aaa6734-c999-4d19-baff-7b9e33339fd5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  fails  get a created peer of other org",
                "fullTitle": "Testing Peers Backend Getting Peers should  fails  get a created peer of other org",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n    .get('/orgs/'+'org2'+'/peers/peer2')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(404)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "ce2b2b41-284b-4bff-9304-8714e1483f70",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  return two peers from org1",
                "fullTitle": "Testing Peers Backend Getting Peers should  return two peers from org1",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+org.orgId+'/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200)\n            expect(res.body).to.have.property('peers').length(2)\n            //expect(res.body).to.have.property('orgs')\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "51f66f61-120e-40bc-ac44-3aa24d9c67a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  return empty from org1",
                "fullTitle": "Testing Peers Backend Getting Peers should  return empty from org1",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+'org2'+'/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200)\n            expect(res.body).to.have.property('peers').length(0)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "e8a8540a-31bd-4e49-a97e-8dcd1d1dff96",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  fail for unexisting org ",
                "fullTitle": "Testing Peers Backend Getting Peers should  fail for unexisting org ",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/orgs/'+'aasdf'+'/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(404)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "a3bc6dc9-db48-4d42-8abf-8711b03a28d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  return peers by orgs (two for org1 and 0 for org2) ",
                "fullTitle": "Testing Peers Backend Getting Peers should  return peers by orgs (two for org1 and 0 for org2) ",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200)\n            expect(res.body).to.have.property('orgs').length(2)\n            expect(res.body).to.have.nested.property('orgs[0]').to.have.property('peers').length(2)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].PeerId').equal(peer.id)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].Domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].IntPort').equal(7050)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].IntGossipPort').equal(7063)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].ExtGossipPort').equal(7063)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].isAnchor').equal(true)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].PeerId').equal('peer2')\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].Domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntPort').equal(7050)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntGossipPort').equal(7053)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].isAnchor').equal(false)\n            expect(res.body).to.have.nested.property('orgs[1]').to.have.property('peers').length(0)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "20ee306b-8b4b-4ecb-b5b1-0b38ef34ef5c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "96235f41-843a-4e29-802f-76ef74d4be3d",
              "139f554e-dcce-434f-93fb-88b8e5cc49b8",
              "2f95481f-7de1-40ac-bd36-98b049561c12",
              "2aaa6734-c999-4d19-baff-7b9e33339fd5",
              "ce2b2b41-284b-4bff-9304-8714e1483f70",
              "51f66f61-120e-40bc-ac44-3aa24d9c67a1",
              "e8a8540a-31bd-4e49-a97e-8dcd1d1dff96",
              "a3bc6dc9-db48-4d42-8abf-8711b03a28d4",
              "20ee306b-8b4b-4ecb-b5b1-0b38ef34ef5c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 32,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e1f96d8e-b333-4b75-9cf2-5eb9d809bdfb",
            "title": "Updating  Peers",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
            "file": "/testPeers.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail update  peer1 unexisting  org",
                "fullTitle": "Testing Peers Backend Updating  Peers should fail update  peer1 unexisting  org",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .put('/orgs/'+'asdf'+'/peers/peer1')\n    .send({config:config1})\n    .end( function(err,res){\n        expect(res).to.have.status(404)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "94e914ec-6f8d-4671-a770-c59d9f8ac020",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail update unknow peer of  org1",
                "fullTitle": "Testing Peers Backend Updating  Peers should fail update unknow peer of  org1",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .put('/orgs/'+org.orgId+'/peers/peer34')\n    .send({config:config1})\n    .end( function(err,res){\n        expect(res).to.have.status(404)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "90d73ae6-c42e-4370-8ae9-8e413f948153",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should   update  peer1 of  org",
                "fullTitle": "Testing Peers Backend Updating  Peers should   update  peer1 of  org",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .put('/orgs/'+org.orgId+'/peers/peer1')\n    .send({config:configWithOutElements})\n    .end( function(err,res){\n        expect(res).to.have.status(200)\n        expect(res.body).to.have.property('PeerId').equal(peer.id)\n        expect(res.body).to.have.property('Domain').equal('org1.miredseg.com')\n        expect(res.body).to.have.property('IntPort').equal(7050)\n        expect(res.body).to.have.property('IntGossipPort').equal(7053)\n        expect(res.body).to.have.property('isAnchor').equal(false)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "60ff6f4c-56fe-4935-8ca7-35056859655c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  get peer updated in org1 ",
                "fullTitle": "Testing Peers Backend Updating  Peers should  get peer updated in org1 ",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200)\n            expect(res.body).to.have.property('orgs').length(2)\n            expect(res.body).to.have.nested.property('orgs[0]').to.have.property('peers').length(2)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].PeerId').equal(peer.id)\n            expect(res.body).to.have.nested.property('orgs[0].peers[0].Domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntPort').equal(7050)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntGossipPort').equal(7053)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].isAnchor').equal(false)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].PeerId').equal('peer2')\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].Domain').equal('org1.miredseg.com')\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntPort').equal(7050)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].IntGossipPort').equal(7053)\n            expect(res.body).to.have.nested.property('orgs[0].peers[1].isAnchor').equal(false)\n            expect(res.body).to.have.nested.property('orgs[1]').to.have.property('peers').length(0)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "00b3ccf6-38c8-4bb7-8346-48925ca09da3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "94e914ec-6f8d-4671-a770-c59d9f8ac020",
              "90d73ae6-c42e-4370-8ae9-8e413f948153",
              "60ff6f4c-56fe-4935-8ca7-35056859655c",
              "00b3ccf6-38c8-4bb7-8346-48925ca09da3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "34245b05-3149-4950-ac67-fa894b05b149",
            "title": "Deleting  Peers",
            "fullFile": "/home/miguel/Proyectos/TraceabilityTool/backend/test/testPeers.js",
            "file": "/testPeers.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail deleting unknow org",
                "fullTitle": "Testing Peers Backend Deleting  Peers should fail deleting unknow org",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .delete('/orgs/'+'adsaf'+'/peers/peer1')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(404)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "10cdf883-ba27-43e3-8357-18590633b381",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail deleting unknow peer",
                "fullTitle": "Testing Peers Backend Deleting  Peers should fail deleting unknow peer",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .delete('/orgs/'+org.orgId+'/peers/peer36')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(404)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "e2343002-94b6-422c-a343-1096960072f6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete  peer1",
                "fullTitle": "Testing Peers Backend Deleting  Peers should delete  peer1",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .delete('/orgs/'+org.orgId+'/peers/peer1')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(200)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "25758bd1-f684-44da-a690-10f67cfabb03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail  get deleted peer1 of  org",
                "fullTitle": "Testing Peers Backend Deleting  Peers should fail  get deleted peer1 of  org",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n                .get('/orgs/'+org.orgId+'/peers/peer1')\n                .send()\n                .end( function(err,res){\n                    expect(res).to.have.status(404)\n                    done()\n                })",
                "err": {},
                "isRoot": false,
                "uuid": "d5616b06-15f3-4f70-8bd5-42b065509a8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete  peer2",
                "fullTitle": "Testing Peers Backend Deleting  Peers should delete  peer2",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "//req.body.id,req.body-orgId,req.body.domain,req.body.config\nchai.request(url)\n    .delete('/orgs/'+org.orgId+'/peers/peer2')\n    .send()\n    .end( function(err,res){\n        expect(res).to.have.status(200)\n        done()\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "084ca1be-f4c2-43d7-950a-6a88c5970d3b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  get 0 peers from orgs ",
                "fullTitle": "Testing Peers Backend Deleting  Peers should  get 0 peers from orgs ",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(url)\n        .get('/peers')\n        .send()\n        .end( function(err,res){\n            expect(res).to.have.status(200)\n            expect(res.body).to.have.property('orgs').length(2)\n            expect(res.body).to.have.nested.property('orgs[0]').to.have.property('peers').length(0)\n            expect(res.body).to.have.nested.property('orgs[1]').to.have.property('peers').length(0)\n            done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "eedb35d1-5a91-4c21-8823-71cbff7242f5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "10cdf883-ba27-43e3-8357-18590633b381",
              "e2343002-94b6-422c-a343-1096960072f6",
              "25758bd1-f684-44da-a690-10f67cfabb03",
              "d5616b06-15f3-4f70-8bd5-42b065509a8f",
              "084ca1be-f4c2-43d7-950a-6a88c5970d3b",
              "eedb35d1-5a91-4c21-8823-71cbff7242f5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 23,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [
      "5311d030-7921-44a9-86c2-1a10439f37c9",
      "107eff79-7bda-41f4-8470-d5a88b3e0c25"
    ],
    "duration": 0,
    "root": true,
    "rootEmpty": false,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}