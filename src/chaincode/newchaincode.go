/*
 * The sample smart contract
 */

package main

/* Imports
 * 4 utility libraries for formatting, handling bytes, reading and writing JSON, and string manipulation
 * 2 specific Hyperledger Fabric specific libraries for Smart Contracts
 */
import (
	// "bytes"
	// "encoding/json"
	 "fmt"
	// "strconv"

	"github.com/hyperledger/fabric/core/chaincode/shim"
	sc "github.com/hyperledger/fabric/protos/peer"
	//"time"
)

// sample Id generator starts at 4
var id = 0
var partId = 0


// Define the Smart Contract structure
type SmartContract struct {
}


// Define the car structure.  Structure tags are used by encoding/json library
type Car struct {
	matricula   int  `json:"matricula"`
	color   string  `json:"color"`
	numPuertas   int  `json:"numPuertas"`
	caballos   int  `json:"caballos"`
	modelo   int  `json:"modelo"`
	marca   int  `json:"marca"`
	ano   int  `json:"ano"`
}


func NewCar( matriculaArg int,   colorArg string,   numPuertasArg int,   caballosArg int,   modeloArg int,   marcaArg int,   anoArg int ) *Car {

	return &Car{

		matricula:   matriculaArg,
		color:   colorArg,
		numPuertas:   numPuertasArg,
		caballos:   caballosArg,
		modelo:   modeloArg,
		marca:   marcaArg,
		ano:   anoArg,
	}
}


/*
 * The Init method is called when the Smart Contract "fabcar" is instantiated by the blockchain network
 * Best practice is to have any Ledger initialization in separate function -- see initLedger()
 */
func (s *SmartContract) Init(APIstub shim.ChaincodeStubInterface) sc.Response {
	fmt.Printf("Initializating...")
	return shim.Success(nil)
}

/*
 * The Invoke method is called as a result of an application request to run the Smart Contract "fabcar"
 * The calling application program has also specified the particular smart contract function to be called, with arguments
 */
func (s *SmartContract) Invoke(APIstub shim.ChaincodeStubInterface) sc.Response {

	// Retrieve the requested Smart Contract function and arguments
	function, args := APIstub.GetFunctionAndParameters()
	// Route to the appropriate handler function to interact with the ledger appropriately
	
	if function == "findCar" {
		return s.findCar(APIstub, args)
	} else if function == "getAllColors" {
		return s.getAllColors(APIstub)
	} else if function == "getAllModels" {
		return s.getAllModels(APIstub, args)
	} else if function == "getAllCars" {
		return s.getAllCars(APIstub, args)
	} 

	return shim.Error("Invalid Smart Contract function name.")
}
func (s *SmartContract) findCar(APIstub shim.ChaincodeStubInterface, args[]string) sc.Response {
	/**
	* This is only a template, it is autogenerated.
	*/
	
	return shim.Success(nil)
}
func (s *SmartContract) getAllColors(APIstub shim.ChaincodeStubInterface) sc.Response {
	/**
	* This is only a template, it is autogenerated.
	*/
	
	return shim.Success(nil)
}
func (s *SmartContract) getAllModels(APIstub shim.ChaincodeStubInterface, args[]string) sc.Response {
	/**
	* This is only a template, it is autogenerated.
	*/
	
	return shim.Success(nil)
}
func (s *SmartContract) getAllCars(APIstub shim.ChaincodeStubInterface, args[]string) sc.Response {
	/**
	* This is only a template, it is autogenerated.
	*/
	
	return shim.Success(nil)
}



// The main function is only relevant in unit test mode. Only included here for completeness.
func main() {

	// Create a new Smart Contract
	err := shim.Start(new(SmartContract))
	if err != nil {
		fmt.Printf("Error creating new Smart Contract: %s", err)
	}
}
